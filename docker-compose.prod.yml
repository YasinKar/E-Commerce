version: '3.8'

services:
  redis:
    image: redis:7.0.11-alpine
    container_name: Ecommerce_redis
    networks:
      - main_network
    volumes:
      - redis_data:/data
    restart: on-failure

  rabbitmq:
    image: rabbitmq:management
    container_name: Ecommerce_rabbitmq
    ports:
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: rabbitmq
    restart: on-failure
    networks:
      - main_network

  db:
    image: postgres
    container_name: Ecommerce_db
    restart: on-failure
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - main_network

  pgadmin:
    container_name: Ecommerce_pgadmin
    image: dpage/pgadmin4
    depends_on:
      - db
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    networks:
      - main_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: Ecommerce_backend
    command: sh -c "python manage.py migrate && gunicorn backend.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - ./backend:/app/
    expose:
      - "8000"
    env_file:
      - ./backend/.env
    depends_on:
      - redis
      - rabbitmq
      - db
    networks:
      - main_network

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: Ecommerce_celery
    command: celery --app=backend worker -l INFO -Q send_otp_email,send_confirmation_email,send_welcome_email,send_notification
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app/
    depends_on:
      - redis
      - rabbitmq
      - backend
    networks:
      - main_network

  frontend:
    container_name: Ecommerce_frontend
    build:
      context: ./frontend
    expose:
      - "3000"
    volumes:
      - ./frontend:/app
    command: sh -c "npm run build && npm start"
    environment:
      - API_URL=http://nginx/api/
    networks:
      - main_network
    depends_on:
      - backend

  nginx:
    image: nginx:latest
    container_name: Ecommerce_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./backend/static:/usr/share/nginx/html/static
      - ./backend/media:/usr/share/nginx/html/media
    depends_on:
      - backend
      - frontend
    networks:
      - main_network

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:

networks:
  main_network:
    driver: bridge
